from abc import ABC, abstractmethod

import openai
from openai.error import OpenAIError

from constants import ERROR_INVALID_COMPLETION_TYPE, GPT_3_5_TURBO_MODEL


class ChatCompletionBase(ABC):
    """
    Abstract base class for chat completion.

    This class defines the common interface for chat completion systems.
    Subclasses must implement the abstract method 'generate_completion' to generate
    completions based on a user's message and model.

    Attributes:
        model (str): The name of the target model.

    Methods:
        generate_completion(message) -> str:
            Generate a completion based on a user's message and model.
    """
    def __init__(self, model):
        self.model = model

    @abstractmethod
    def generate_completion(self, message) -> str:
        """
        Abstract method to generate a completion based on a user's message and model.

         Args:
            message (str or list of dict): The user's message or user's chat history.

        Returns:
            str: The completion generated by the chat system.
        """


class GPTChatCompletion(ChatCompletionBase):
    """
    Chat completion system using the GPT-3.5 Turbo model.

    This class provides a chat completion system using the GPT-3.5 Turbo model
    from OpenAI. It implements the 'generate_completion' method to generate completions
    based on a user's message.

    Args:
        model (str): The name of the target model (GPT-3.5 Turbo).

    Methods:
        generate_completion(message) -> str:
            Generate a completion based on a user's message using GPT-3.5 Turbo.

    Raises:
        OpenAIError: If an error occurs during completion generation.
    """
    def __init__(self, model):
        super().__init__(model)

    def generate_completion(self, message) -> str:
        """
        Generate a completion based on a user's message using GPT-3.5 Turbo.
        """
        try:
            # Generate a completion using OpenAI APIs
            completion = openai.ChatCompletion.create(
                model=self.model,
                messages=message,
            )

            # Assistant's message response
            completion_message = completion.choices[0].message

            return completion_message
        except OpenAIError as e:
            raise OpenAIError(str(e))


class ChatCompletionFactory:
    """
    A factory class for creating chat completion instances.

    This factory allows you to create instances of various chat completion systems
    based on the specified completion type. based on the need, you can add easily 
    any new chat completion  

    Usage:
        factory = ChatCompletionFactory()
        chat_completion = factory.create_chat_completion("gpt")

    Attributes:
        None

    Methods:
        create_chat_completion(completion_type):
            Create a chat completion instance based on the specified type.

    Raises:
        ValueError: If an invalid completion_type is provided.
    """
    @staticmethod
    def create_chat_completion(completion_type):
        """
        Create a chat completion instance based on the specified type.

        Args:
            completion_type (str): The type of completion system to create.

        Returns:
            ChatCompletionBase: An instance of the chat completion system.

        Raises:
            ValueError: If an invalid completion_type is provided.
        """
        if completion_type == "gpt":
            return GPTChatCompletion(model=GPT_3_5_TURBO_MODEL)
        # Add more completion system types as needed
        else:
            raise ValueError(ERROR_INVALID_COMPLETION_TYPE)
